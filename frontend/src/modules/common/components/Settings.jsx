import React, { useState } from 'react';
import { Card, Tabs, Select, Button, message, Space, Typography } from 'antd';
import { GlobalOutlined, SettingOutlined } from '@ant-design/icons';

const { Title, Text } = Typography;
const { TabPane } = Tabs;
const { Option } = Select;

const Settings = () => {
  const [selectedLanguage, setSelectedLanguage] = useState('tr');
  const [loading, setLoading] = useState(false);

  const languages = [
    { code: 'tr', name: 'TÃ¼rkÃ§e', flag: 'ğŸ‡¹ğŸ‡·' },
    { code: 'en', name: 'English', flag: 'ğŸ‡ºğŸ‡¸' },
    { code: 'de', name: 'Deutsch', flag: 'ğŸ‡©ğŸ‡ª' },
    { code: 'fr', name: 'FranÃ§ais', flag: 'ğŸ‡«ğŸ‡·' },
    { code: 'es', name: 'EspaÃ±ol', flag: 'ğŸ‡ªğŸ‡¸' },
    { code: 'ar', name: 'Ø§Ù„Ø¹Ø±Ø¨ÙŠØ©', flag: 'ğŸ‡¸ğŸ‡¦' },
  ];

  const handleLanguageChange = async (languageCode) => {
    setLoading(true);
    try {
      // Burada dil deÄŸiÅŸikliÄŸi iÃ§in API Ã§aÄŸrÄ±sÄ± yapÄ±labilir
      setSelectedLanguage(languageCode);
      
      // Dil deÄŸiÅŸikliÄŸini localStorage'a kaydet
      localStorage.setItem('selectedLanguage', languageCode);
      
      message.success(`${languages.find(lang => lang.code === languageCode)?.name} diline geÃ§ildi!`);
      
      // SayfayÄ± yenile (dil deÄŸiÅŸikliÄŸinin etkili olmasÄ± iÃ§in)
      setTimeout(() => {
        window.location.reload();
      }, 1000);
      
    } catch (error) {
      console.error('Dil deÄŸiÅŸikliÄŸi hatasÄ±:', error);
      message.error('Dil deÄŸiÅŸikliÄŸi yapÄ±lÄ±rken hata oluÅŸtu!');
    } finally {
      setLoading(false);
    }
  };

  const handleSaveSettings = async () => {
    setLoading(true);
    try {
      // Burada tÃ¼m ayarlarÄ± kaydetmek iÃ§in API Ã§aÄŸrÄ±sÄ± yapÄ±labilir
      message.success('Ayarlar baÅŸarÄ±yla kaydedildi!');
    } catch (error) {
      console.error('Ayar kaydetme hatasÄ±:', error);
      message.error('Ayarlar kaydedilirken hata oluÅŸtu!');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ padding: '24px' }}>
      <Title level={2}>
        <SettingOutlined style={{ marginRight: '12px' }} />
        Genel Ayarlar
      </Title>
      
      <Card>
        <Tabs defaultActiveKey="language" size="large">
          <TabPane 
            tab={
              <span>
                <GlobalOutlined />
                Dil AyarlarÄ±
              </span>
            } 
            key="language"
          >
            <div style={{ maxWidth: '600px' }}>
              <Title level={4}>Uygulama Dili</Title>
              <Text type="secondary">
                UygulamanÄ±n gÃ¶rÃ¼ntÃ¼leneceÄŸi dili seÃ§in. Bu ayar tÃ¼m kullanÄ±cÄ±lar iÃ§in geÃ§erli olacaktÄ±r.
              </Text>
              
              <div style={{ marginTop: '24px' }}>
                <Space direction="vertical" size="large" style={{ width: '100%' }}>
                  <div>
                    <Text strong>Mevcut Dil:</Text>
                    <div style={{ marginTop: '8px' }}>
                      <Select
                        value={selectedLanguage}
                        onChange={handleLanguageChange}
                        style={{ width: '300px' }}
                        loading={loading}
                        placeholder="Dil seÃ§in"
                      >
                        {languages.map(language => (
                          <Option key={language.code} value={language.code}>
                            <Space>
                              <span>{language.flag}</span>
                              <span>{language.name}</span>
                            </Space>
                          </Option>
                        ))}
                      </Select>
                    </div>
                  </div>
                  
                  <div>
                    <Text strong>SeÃ§ili Dil:</Text>
                    <div style={{ marginTop: '8px', padding: '12px', backgroundColor: '#f5f5f5', borderRadius: '6px' }}>
                      <Space>
                        <span style={{ fontSize: '20px' }}>
                          {languages.find(lang => lang.code === selectedLanguage)?.flag}
                        </span>
                        <span>
                          {languages.find(lang => lang.code === selectedLanguage)?.name}
                        </span>
                      </Space>
                    </div>
                  </div>
                  
                  <div>
                    <Button 
                      type="primary" 
                      onClick={handleSaveSettings}
                      loading={loading}
                      icon={<SettingOutlined />}
                    >
                      AyarlarÄ± Kaydet
                    </Button>
                  </div>
                </Space>
              </div>
            </div>
          </TabPane>
          
          {/* Gelecekte eklenebilecek diÄŸer ayar sekmeleri */}
          <TabPane 
            tab={
              <span>
                <SettingOutlined />
                GeliÅŸmiÅŸ Ayarlar
              </span>
            } 
            key="advanced"
            disabled
          >
            <div style={{ textAlign: 'center', padding: '40px' }}>
              <Text type="secondary">Bu Ã¶zellik yakÄ±nda eklenecek...</Text>
            </div>
          </TabPane>
        </Tabs>
      </Card>
    </div>
  );
};

export default Settings;
